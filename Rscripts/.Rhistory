cancer_deaths = mean(cancer_deaths, na.rm = TRUE),
#temp = mean(AverageTemperature, na.rm = TRUE),
corruption = first(corruption),
gov = first(gov),
healthSecurity = first(healthSecurity)) %>%
arrange(desc(m_tcpm))
# Transform na & nan to 0 or "no data"
top10clusterAll$obesity[is.na(top10clusterAll$obesity)] <- 0
top10clusterAll$population_density[is.na(top10clusterAll$population_density)] <- 0
top10clusterAll$median_age[is.na(top10clusterAll$median_age)] <- 0
top10clusterAll$gdp_per_capita[is.na(top10clusterAll$gdp_per_capita)] <- 0
top10clusterAll$corruption[is.na(top10clusterAll$corruption)] <- "no data"
top10clusterAll$gov[is.na(top10clusterAll$gov)] <- "no data"
top10clusterAll$healthSecurity[is.na(top10clusterAll$healthSecurity)] <- "no data"
top10clusterAll$reproduction_rate[is.nan(top10clusterAll$reproduction_rate)] <- 0
top10clusterAll$total_deaths[is.nan(top10clusterAll$total_deaths)] <- 0
top10clusterAll$total_deaths_per_million[is.nan(top10clusterAll$total_deaths_per_million)] <- 0
top10clusterAll$hospital_beds_per_thousand[is.nan(top10clusterAll$hospital_beds_per_thousand)] <- 0
top10clusterAll$total_tests_per_thousand[is.nan(top10clusterAll$total_tests_per_thousand)] <- 0
top10clusterAll$total_tests[is.nan(top10clusterAll$total_tests)] <- 0
top10clusterAll$new_deaths[is.nan(top10clusterAll$new_deaths)] <- 0
top10clusterAll$cardiovascular_deaths[is.nan(top10clusterAll$cardiovascular_deaths)] <- 0
top10clusterAll$pulmonary_deaths[is.nan(top10clusterAll$pulmonary_deaths)] <- 0
top10clusterAll$diabetes_deaths[is.nan(top10clusterAll$diabetes_deaths)] <- 0
top10clusterAll$cancer_deaths[is.nan(top10clusterAll$cancer_deaths)] <- 0
# Comprovem que no hi ha na's
apply(
is.na
(top10clusterAll), 2, mean)
str(top10clusterAll) # x veure tipus dada. x clust: caràcters han ser factors
top10clusterAll$location <- as.factor(top10clusterAll$location)
class(top10clusterAll$location)
top10clusterAll$continent <- as.factor(top10clusterAll$continent)
class(top10clusterAll$continent)
top10clusterAll$code <- as.factor(top10clusterAll$code)
class(top10clusterAll$code)
top10clusterAll$gov <- as.factor(top10clusterAll$gov)
class(top10clusterAll$gov)
top10clusterAll$corruption <- as.factor(top10clusterAll$corruption)
class(top10clusterAll$corruption)
top10clusterAll$healthSecurity <- as.factor(top10clusterAll$healthSecurity)
class(top10clusterAll$healthSecurity)
library(lubridate)
top10clusterAll$date <- as.Date(top10clusterAll$date, format="%Y-%m-%d")
class(top10clusterAll$date)
# Quitamos United States y Brazil, pq las analizaremos en un grupo diferente
# Lo explicamos en el informe
top10cluster <-top10clusterAll[-c(13), ]
top10cluster <-top10cluster[-c(15),]
library(cluster)
str(top10cluster)
View(top10cluster)
top10Matrix4 <- daisy(top10cluster[,c(5:23)], metric = "gower", stand=TRUE)
top10dist4 <- top10Matrix4^2
h4 <- hclust(top10dist4, method="ward.D2")
plot(h4, labels = top10cluster$location, hang = -1, cex = 0.3, cex.axis=0.5, cex.lab=0.5)
cluster4 <- cutree(h4, k=4)
table(cluster4)
rect.hclust(h4, k=4, border=2:5)
cluster <- cluster4
# Ajuntem la columna cluster al data frame top10cluster
top10cluster <- cbind(top10cluster, cluster)
top10cluster <- rename(top10cluster, cluster = "...27")
names(top10cluster)
# Cluster g1
c_g1 <- top10 %>%
filter(location %in% c("Qatar", "Bahrain", "Luxembourg", "Kuwait", "United Arab Emirates","Singapore"))
table(c_g1$location)
c_g1_mean <- top10cluster %>%
filter(location %in% c("Qatar", "Bahrain", "Luxembourg", "Kuwait", "United Arab Emirates","Singapore"))
# Cluster g2
c_g2 <- top10 %>%
filter(location %in% c("Panama", "Montenegro", "Armenia", "Oman", "Maldives","Morocco", "Moldova", "Costa Rica", "Cape Verde", "Georgia", "Bahamas", "Bolivia", "Dominican Republic", "Ecuador", "Belize", "Honduras", "Suriname", "Djibouti", "Libya", "Paraguay", "Sao Tome and Principe", "Guatemala", "Eswatini", "Gabon", "Namibia", "Guyana",  "Equatorial Guinea", "New Zealand", "Marshall Islands", "Papua New Guinea","Fiji", "Solomon Islands", "Samoa", "Vanuatu"))
table(c_g2$location)
c_g2_mean <- top10cluster %>%
filter(location %in% c("Panama", "Montenegro", "Armenia", "Oman", "Maldives","Morocco", "Moldova", "Costa Rica", "Cape Verde", "Georgia", "Bahamas", "Bolivia", "Dominican Republic", "Ecuador", "Belize", "Honduras", "Suriname", "Djibouti", "Libya", "Paraguay", "Sao Tome and Principe", "Guatemala", "Eswatini", "Gabon", "Namibia", "Guyana",  "Equatorial Guinea", "New Zealand", "Marshall Islands", "Papua New Guinea","Fiji", "Solomon Islands", "Samoa", "Vanuatu"))
# Cluster g3
c_g3 <- top10 %>%
filter(location %in% c("Chile", "Israel", "Belgium", "Czechia", "Switzerland", "Canada","Australia"))
table(c_g3$location)
c_g3_mean <- top10cluster %>%
filter(location %in% c("Chile", "Israel", "Belgium", "Czechia", "Switzerland", "Canada","Australia"))
# Cluster g4
c_g4 <- top10 %>%
filter(location %in% c("Peru", "Spain", "Argentina", "Colombia", "South Africa", "Mexico"))
table(c_g4$location)
c_g4_mean <- top10cluster %>%
filter(location %in% c("Peru", "Spain", "Argentina", "Colombia", "South Africa", "Mexico"))
# Cluster g5
c_g5 <- top10 %>%
filter(location %in% c("United States", "Brazil"))
table(c_g5$location)
c_g5_mean <- top10clusterAll %>%
filter(location %in% c("United States", "Brazil"))
library(corrplot)
library(PerformanceAnalytics)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
chart.Correlation(c_g5_mean[,c(5:23)], histogram = FALSE, method = "pearson")
View(c_g5_mean)
View(top10)
View(top10clusterAll)
View(c_g5_mean)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
chart.Correlation(c_g5_mean[,c(5:23)], histogram = FALSE, method = "kendall")
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
chart.Correlation(c_g5_mean[,c(5:23)], histogram = FALSE, method = "spearman")
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
chart.Correlation(c_g5_mean[,c(5:23)], histogram = FALSE, method = "pearson")
cor(c_g5_mean$m_tcpm, c_g5_mean$obesity)
cor.test(c_g5_mean$m_tcpm, c_g5_mean$obesity)
# Cluster g4 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
chart.Correlation(c_g4_mean[,c(5:23)], histogram = FALSE, method = "pearson")
View(c_g5_mean)
boxplot(c_g5_mean)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
pairwise.t.test(c_g5_mean$m_tcpm, c_g5_mean$obesity)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
pairwise.t.test(c_g5_mean$m_tcpm, c_g5_mean$obesity, p.adj = "bonf")
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
t.test(m_tcpm ~ obesity)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
t.test(c_g5_mean$m_tcpm ~ c_g5_mean$obesity)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
barplot(c_g5_mean, main="xx,
xlab="x")
#names(c_g1[,c(5:11,13,14)])
#names(c_g1)
lm_c_g1 <- lm(top10cluster$total_cases ~ top10cluster$total_deaths, top10cluster)
# summary(top10lm)
# plot(top10lm)
# plot(top10b$total_cases, top10b$total_deaths)
# boxplot(top10b$total_cases, horizontal=TRUE, main=names(top10b)[6])
# boxplot(top10b$total_deaths,horizontal=TRUE,main=names(top10b)[9])
# hist(top10b$total_cases, breaks=15)
# hist(top10b$total_deaths,breaks=15)
# cor(dist,speed)
# cor.test(dist,speed)
# predict(lm_c_g1);
# write.csv(lm_c_g1, file = "C-top10Cluster1Pred.csv")
# write.csv(lm_c_g2, file = "C-top10Cluster2Pred.csv")
# write.csv(lm_c_g3, file = "C-top10Cluster3Pred.csv")
# write.csv(lm_c_g4, file = "C-top10Cluster4Pred.csv")
# write.csv(lm_c_g5, file = "C-top10Cluster5Pred.csv")
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
barplot(c_g5_mean, main="xx", xlab="x")
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
#barplot(c_g5_mean, main="xx", xlab="x")
barplot(t(as.matrix(c_g5_mean)), beside=TRUE)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
t <- table(c_g5_mean$m_tcpm)
barplot(t)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
t <- table(c_g5_mean)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
t <- table(c_g5[,c(5:11,13,14)])
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
t <- table(c_g5_mean$m_tcpm)
barplot(t(as.matrix(c_g5_mean)), beside=TRUE)
barplot(t(as.matrix(c_g4_mean[,c(5:23)])), beside=TRUE)
# Cluster g5 - Matrix correlation -> variables NO temporales (lo hacemos con la media)
# We can't do the correlation because we only have 2 countries
t <- table(c_g4_mean[,c(5:23)])
barplot(t(as.matrix(c_g4_mean[,c(5:23)])), beside=TRUE, xlab = "hola")
barplot(t(as.matrix(c_g4_mean[,c(5:23)])), beside=TRUE)
barplot(t(as.matrix(c_g4_mean[,c(5:23)])))
View(c_g1_mean)
# Cluster g1 - Significancia categóricas
g1_aov <- aov(corruption ~ c_g1_mean[,c(5:23)], c_g1_mean)
# Cluster g1 - Significancia categóricas
g1_aov <- aov(corruption ~ m_tcpm, c_g1_mean)
g1_aov
summary(g1_aov)
# Compute the analysis of variance
g1_aov <- aov(corruption ~ m_tcpm, data = c_g1_mean)
# Summary of the analysis
summary(g1_aov)
# Compute the analysis of variance
g1_aov <- aov(m_tcpm ~ corruption, data = c_g1_mean)
# Summary of the analysis
summary(g1_aov)
g1_aov <- aov(total_cases ~ corruption, data = c_g1_mean) # No significativo
summary(g1_aov)
g1_aov <- aov(new_cases ~ corruption, data = c_g1_mean) # No significativo
summary(g1_aov)
g1_aov <- aov(total_deaths ~ corruption, data = c_g1_mean) # SI significativo
summary(g1_aov)
g1_aov <- aov(total_deaths_per_million ~ corruption, data = c_g1_mean) # NO significativo
summary(g1_aov)
g1_aov <- aov(total_tests ~ corruption, data = c_g1_mean) # NO significativo
summary(g1_aov)
g1_aov <- aov(total_tests_per_thousand ~ corruption, data = c_g1_mean) # NO significativo
summary(g1_aov)
g1_aov <- aov(population ~ corruption, data = c_g1_mean) # No significativo
summary(g1_aov)
g1_aov <- aov(population ~ corruption, data = c_g1_mean)
g1_aov <- aov(population ~ corruption, data = c_g1_mean)
g1_aov <- aov(cardiovasc_death_rate ~ corruption, data = c_g1_mean)
g1_aov <- aov(cardiovascular_deaths ~ corruption, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(pulmonary_deaths ~ corruption, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(diabetes_deaths ~ corruption, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(m_tcpm ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(total_cases ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(new_cases ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(total_deaths ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(total_deaths_per_million ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(total_tests ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(total_tests_per_thousand ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(total_tests_per_thousand ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(population ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(cardiovascular_deaths ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(pulmonary_deaths ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(diabetes_deaths ~ gov, data = c_g1_mean)
summary(g1_aov)
g1_aov <- aov(m_tcpm ~ healthSecurity, data = c_g1_mean)
g1_t_test <- t.test(m_tcpm ~ healthSecurity, data = c_g1_mean)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths + total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths, top10)
summary(top10lm)
summary(lm_c_g1)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths + total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths + population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths, top10)
summary(lm_c_g1)
install.packages("stargazer")
library(stargazer)
stargazer(lm_c_g1, type="text", df=FALSE)
plot(lm_c_g1)
View(top10)
View(lm_c_g1)
fcast <- forecast(lm_c_g1)
install.packages("forecast")
library(forecast)
fcast <- forecast(lm_c_g1)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths + total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths + population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths, top10)
fcast <- forecast(lm_c_g1)
fcast <- forecast(lm_c_g1, , newdata = newdata)
beer2 <- window(top10, start=2020-01-01)
beer2 <- window(top10, start=2020)
fcast <- forecast(lm_c_g1)
fcast <- forecast(lm_c_g1, newdata = lm_c_g1)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths + total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths + population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths, top10)
fcast <- forecast(lm_c_g1, newdata = lm_c_g1)
autoplot(fcast) +
ggtitle("Forecasts of beer production using regression") +
xlab("Year") + ylab("megalitres")
fcast <- forecast(lm_c_g1, newdata = lm_c_g1)
names(top10)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths + total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths + population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths, top10)
fcast <- forecast(lm_c_g1, newdata = lm_c_g1)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths + total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths + population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths, top10)
# plot(lm_c_g1)
predict(lm_c_g1);
# plot(lm_c_g1)
predict(lm_c_g1)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths +
total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths +
population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths, top10)
# plot(lm_c_g1)
predict(lm_c_g1)
View(top10)
class(top10)
class(top10$date)
View(lm_c_g1)
#summary(lm_c_g1)
class(lm_c_g1)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths +
total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths +
population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths, c_g1)
summary(lm_c_g1)
# plot(lm_c_g1)
predict(lm_c_g1)
View(c_g1)
View(lm_c_g1)
lm_c_g1[["model"]][["cardiovascular_deaths"]]
# plot(lm_c_g1)
predict(lm_c_g1)
View(lm_c_g1)
View(c_g1)
lm_c_g1 <- lm(new_cases ~ total_cases + total_cases_per_million + total_deaths +
total_deaths_per_million + total_tests_per_thousand + total_tests + new_deaths +
population + cardiovascular_deaths + pulmonary_deaths + diabetes_deaths + date, c_g1)
summary(lm_c_g1)
today()
tomorrow()
today()
install.packages("readr")
install.packages("readr")
library(readr);
library(tidyverse);
#data <- read.csv("https://mvtec-group2.s3-eu-west-1.amazonaws.com/rawdata/A_covidDaily.csv")
data <- read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
data <- rename(data, code = iso_code)
head(data)   # mostrar 10 1es files cada colm
names(data)  # mostrar nom columnes
# is R reading data correctly?
# Has dd the correct number of ROWS and COLUMNS?
dim(data)
# TIPO DE OBJETO DATOS
class(data)
#are all columns of expected types?
sapply(data, class)
# ens quedem amb les columnes que tenen menys NA's
apply(
is.na
(data), 2, mean)
# reduir la bd eliminant colm --> https://www.listendata.com/2015/06/r-keep-drop-columns-from-data-frame.html
data <- subset(data, select = c(code, continent, location, date, total_cases, total_cases_per_million, new_cases, reproduction_rate, total_deaths, total_deaths_per_million, new_deaths, hospital_beds_per_thousand, total_tests, total_tests_per_thousand, population, population_density, median_age, gdp_per_capita))
## dates ##
class(data$date)  # --> ha ser data i no caràcter
library(lubridate)
#data$date <- ymd(data$date)
data$date <- as.Date(data$date, format="%Y-%m-%d")
class(data$date)
# x saber quants NA hi ha per colm
apply(is.na(data), 2, sum) # 2 = columnes
# reduir la bd eliminant colm --> https://www.listendata.com/2015/06/r-keep-drop-columns-from-data-frame.html
data <- subset(data, select = c(code, continent, location, date, total_cases, total_cases_per_million, new_cases, reproduction_rate, total_deaths, total_deaths_per_million, new_deaths, hospital_beds_per_thousand, total_tests, total_tests_per_thousand, population, population_density, median_age, gdp_per_capita))
## dates ##
class(data$date)  # --> ha ser data i no caràcter
library(lubridate)
#data$date <- ymd(data$date)
data$date <- as.Date(data$date, format="%Y-%m-%d")
class(data$date)
# x saber quants NA hi ha per colm
apply(is.na(data), 2, sum) # 2 = columnes
data <- rename(data, code = iso_code)
View(data)
#data <- read.csv("https://mvtec-group2.s3-eu-west-1.amazonaws.com/rawdata/A_covidDaily.csv")
data <- read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
#data <- read.csv("https://mvtec-group2.s3-eu-west-1.amazonaws.com/rawdata/A_covidDaily.csv")
# Add a try catch
data <- read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv")
View(c_g5_mean)
g1_mean_pred <- c_g1 %>%
group_by(date) %>%
arrange(desc(date)) %>% # current date first
slice_head(n=6)  # 6 = num countries c1
View(g1_mean_pred)
g1_mean_pred <- c_g1 %>%
group_by(date = "2021-01-02") %>%
arrange(desc(date)) %>% # current date first
slice_head(n=6)  # 6 = num countries c1
View(g1_mean_pred)
g1_mean_pred <- c_g1 %>%
group_by(date = "2021-01-02",location) %>%
arrange(desc(date)) %>% # current date first
slice_head(n=6)  # 6 = num countries c1
g1_mean_pred <- c_g1 %>%
group_by(date = "2021-01-02",location) %>%
arrange(desc(date)) # current date first
g1_mean_pred <- c_g1 %>%
filter(date %in% c("2021-01-02")) %>%
arrange(desc(date)) # current date first
g1_mean_pred <- c_g1 %>%
filter(date %in% c("2021-01-02"))
g1_mean_pred <- subset(c_g1, date == "2021-01-02")
g1_mean_tc <- mean(g1_pred_subset$total_cases)
g1_pred_subset <- subset(c_g1, date == "2021-01-02")
g1_mean_tc <- mean(g1_pred_subset$total_cases)
g1_mean_tc
g1_pred_subset <- subset(c_g1, date == "2021-01-02")
library(readr)
library(tidyverse)
top10 <- read.csv("B-top10Data.csv") # S3
top10 <- subset(top10, select = -c(X))
head(top10)   # mostrar 10 1es files cada colm
names(top10)  # mostrar nom colm
library(lubridate)
top10$date <- as.Date(top10$date, format="%Y-%m-%d")
#top10cluster - agrupem per location, code and continent & treiem na's fent la mitjana
top10clusterAll <- top10 %>%
group_by(code, location, continent) %>%  # si date es posa aquí, apareix cada país per cada dia
summarise(date = first(date),
m_tcpm = mean(total_cases_per_million, na.rm = TRUE),   # si date es posa a summarise, apareix 1 país x 1 dia (agafa el 23 gen20)
total_cases = mean(total_cases, na.rm = TRUE),
new_cases = mean(new_cases, na.rm = TRUE),
reproduction_rate = mean(reproduction_rate, na.rm = TRUE),
total_deaths = mean(total_deaths, na.rm = TRUE),
total_deaths_per_million = mean(total_deaths_per_million, na.rm = TRUE),
new_deaths = mean(new_deaths, na.rm = TRUE),
hospital_beds_per_thousand = mean(hospital_beds_per_thousand, na.rm = TRUE),
total_tests = mean(total_tests, na.rm = TRUE),
total_tests_per_thousand = mean(total_tests_per_thousand, na.rm = TRUE),
population = first(population),
population_density = first(population_density),
median_age = first(median_age),
gdp_per_capita = first(gdp_per_capita),
obesity = first(obesity),
cardiovascular_deaths = mean(cardiovascular_deaths, na.rm = TRUE),
pulmonary_deaths = mean(pulmonary_deaths, na.rm = TRUE),
diabetes_deaths = mean(diabetes_deaths, na.rm = TRUE),
cancer_deaths = mean(cancer_deaths, na.rm = TRUE),
#temp = mean(AverageTemperature, na.rm = TRUE),
corruption = first(corruption),
gov = first(gov),
healthSecurity = first(healthSecurity)) %>%
arrange(desc(m_tcpm))
# Transform na & nan to 0 or "no data"
top10clusterAll$obesity[is.na(top10clusterAll$obesity)] <- 0
top10clusterAll$population_density[is.na(top10clusterAll$population_density)] <- 0
top10clusterAll$gdp_per_capita[is.na(top10clusterAll$gdp_per_capita)] <- 0
top10clusterAll$corruption[is.na(top10clusterAll$corruption)] <- "no data"
top10clusterAll$gov[is.na(top10clusterAll$gov)] <- "no data"
top10clusterAll$healthSecurity[is.na(top10clusterAll$healthSecurity)] <- "no data"
top10clusterAll$reproduction_rate[is.nan(top10clusterAll$reproduction_rate)] <- 0
top10clusterAll$total_deaths[is.nan(top10clusterAll$total_deaths)] <- 0
top10clusterAll$total_deaths_per_million[is.nan(top10clusterAll$total_deaths_per_million)] <- 0
top10clusterAll$hospital_beds_per_thousand[is.nan(top10clusterAll$hospital_beds_per_thousand)] <- 0
top10clusterAll$total_tests_per_thousand[is.nan(top10clusterAll$total_tests_per_thousand)] <- 0
top10clusterAll$total_tests[is.nan(top10clusterAll$total_tests)] <- 0
top10clusterAll$new_deaths[is.nan(top10clusterAll$new_deaths)] <- 0
top10clusterAll$cardiovascular_deaths[is.nan(top10clusterAll$cardiovascular_deaths)] <- 0
top10clusterAll$pulmonary_deaths[is.nan(top10clusterAll$pulmonary_deaths)] <- 0
top10clusterAll$diabetes_deaths[is.nan(top10clusterAll$diabetes_deaths)] <- 0
top10clusterAll$cancer_deaths[is.nan(top10clusterAll$cancer_deaths)] <- 0
# Comprovem que no hi ha na's
apply(
is.na
(top10clusterAll), 2, mean)
top10clusterAll$median_age[is.na(top10clusterAll$median_age)] <- 0
# Comprovem que no hi ha na's
apply(
is.na
(top10clusterAll), 2, mean)
str(top10clusterAll) # x veure tipus dada. x clust: caràcters han ser factors
top10clusterAll$location <- as.factor(top10clusterAll$location)
class(top10clusterAll$location)
top10clusterAll$continent <- as.factor(top10clusterAll$continent)
class(top10clusterAll$continent)
top10clusterAll$code <- as.factor(top10clusterAll$code)
class(top10clusterAll$code)
top10clusterAll$gov <- as.factor(top10clusterAll$gov)
class(top10clusterAll$gov)
top10clusterAll$corruption <- as.factor(top10clusterAll$corruption)
class(top10clusterAll$corruption)
top10clusterAll$healthSecurity <- as.factor(top10clusterAll$healthSecurity)
class(top10clusterAll$healthSecurity)
library(lubridate)
top10clusterAll$date <- as.Date(top10clusterAll$date, format="%Y-%m-%d")
class(top10clusterAll$date)
# Quitamos United States y Brazil, pq las analizaremos en un grupo diferente
# Lo explicamos en el informe
top10cluster <-top10clusterAll[-c(13), ]
top10cluster <-top10cluster[-c(15),]
library(cluster)
str(top10cluster)
top10Matrix4 <- daisy(top10cluster[,c(5:23)], metric = "gower", stand=TRUE)
top10dist4 <- top10Matrix4^2
h4 <- hclust(top10dist4, method="ward.D2")
plot(h4, labels = top10cluster$location, hang = -1, cex = 0.3, cex.axis=0.5, cex.lab=0.5)
cluster4 <- cutree(h4, k=4)
table(cluster4)
rect.hclust(h4, k=4, border=2:5)
cluster <- cluster4
# Ajuntem la columna cluster al data frame top10cluster
top10cluster <- cbind(top10cluster, cluster)
top10cluster <- rename(top10cluster, cluster = "...27")
names(top10cluster)
# Cluster g1
c_g1 <- top10 %>%
filter(location %in% c("Qatar", "Bahrain", "Luxembourg", "Kuwait", "United Arab Emirates","Singapore"))
table(c_g1$location)
c_g1_mean <- top10cluster %>%
filter(location %in% c("Qatar", "Bahrain", "Luxembourg", "Kuwait", "United Arab Emirates","Singapore"))
# Cluster g2
c_g2 <- top10 %>%
filter(location %in% c("Panama", "Montenegro", "Armenia", "Oman", "Maldives","Morocco", "Moldova", "Costa Rica", "Cape Verde", "Georgia", "Bahamas", "Bolivia", "Dominican Republic", "Ecuador", "Belize", "Honduras", "Suriname", "Djibouti", "Libya", "Paraguay", "Sao Tome and Principe", "Guatemala", "Eswatini", "Gabon", "Namibia", "Guyana",  "Equatorial Guinea", "New Zealand", "Marshall Islands", "Papua New Guinea","Fiji", "Solomon Islands", "Samoa", "Vanuatu"))
table(c_g2$location)
c_g2_mean <- top10cluster %>%
filter(location %in% c("Panama", "Montenegro", "Armenia", "Oman", "Maldives","Morocco", "Moldova", "Costa Rica", "Cape Verde", "Georgia", "Bahamas", "Bolivia", "Dominican Republic", "Ecuador", "Belize", "Honduras", "Suriname", "Djibouti", "Libya", "Paraguay", "Sao Tome and Principe", "Guatemala", "Eswatini", "Gabon", "Namibia", "Guyana",  "Equatorial Guinea", "New Zealand", "Marshall Islands", "Papua New Guinea","Fiji", "Solomon Islands", "Samoa", "Vanuatu"))
# Cluster g3
c_g3 <- top10 %>%
filter(location %in% c("Chile", "Israel", "Belgium", "Czechia", "Switzerland", "Canada","Australia"))
table(c_g3$location)
c_g3_mean <- top10cluster %>%
filter(location %in% c("Chile", "Israel", "Belgium", "Czechia", "Switzerland", "Canada","Australia"))
# Cluster g4
c_g4 <- top10 %>%
filter(location %in% c("Peru", "Spain", "Argentina", "Colombia", "South Africa", "Mexico"))
table(c_g4$location)
c_g4_mean <- top10cluster %>%
filter(location %in% c("Peru", "Spain", "Argentina", "Colombia", "South Africa", "Mexico"))
# Cluster g5
c_g5 <- top10 %>%
filter(location %in% c("United States", "Brazil"))
table(c_g5$location)
c_g5_mean <- top10clusterAll %>%
filter(location %in% c("United States", "Brazil"))
library(corrplot)
library(PerformanceAnalytics)
g1_pred_subset <- subset(c_g1, date == "2021-01-02")
g1_mean_tc <- mean(g1_pred_subset$total_cases)
g1_mean_tc
View(g1_pred_subset)
