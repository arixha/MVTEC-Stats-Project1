library(tidyverse)

# pujar dades
data <- read.csv("covid-ok.csv")
head(data)   # mostrar 10 1es files cada colm
names(data)  # mostrar nom colm

sapply(data, class) # quin tipus dada és cada colm, no db en conj

# reduir la bd eliminant colm --> https://www.listendata.com/2015/06/r-keep-drop-columns-from-data-frame.html 
data <- subset(data, select = -c(total_cases, new_cases, total_deaths, new_deaths, new_cases_per_million, new_deaths_per_million, icu_patients, hosp_patients, total_tests, new_tests, new_tests_per_thousand, positive_rate:stringency_index, aged_65_older, aged_70_older, extreme_poverty, diabetes_prevalence, female_smokers, male_smokers, life_expectancy, human_development_index))
 # tmb es pot fer subset en positiu: quines colm deixar --> select = c() [sense el signe - davant la c]                                 

# NO pel treball, xò ok x provar ## !!!! 
# test_units és caràcter => mirar quines categ té ------- !!! és var q volem tenir compte??? !!!
 #table(data$tests_units)

# table(data$handwashing_facilities)  # tmb x veure com són valors q inclou

# conversió tests_units a factor, x veure categ q té amb levels (només mostra categ, no quantes n'hi ha, com table)
  # factor és forma q R té per emmagatzemar la info categòrica
# data$tests_units <- as.factor(data$tests_units)
# class(data$tests_units)
# levels(data$tests_units)


## DATES ##
class(data$date)  # --> ha ser data i no caràcter
## data$date <- as.Date(data$date, format="%d/%m/%y")  -- ordre correcta, xò no funciona!!!!!
library(lubridate)
data$date <- ymd(data$date)
class(data$date)



###### DIES --> SETMANES #######
# prova x veure si canvi format dates funciona, s/Na, amb taula petita
dataProva <- subset(data, select = c(location, date, total_cases_per_million), na.rm = TRUE)
# jo --> aggregate(dataProva$total_cases_per_million, by = list(week(dataProva$date)), mean)
# jo --> dataProva[!is.na(dataProva$total_cases_per_million), ] 

# nova bd s/Na a casos/hab, xò només amb set (dates transformades!) i mitjana casos
dataProva2 <- dataProva %>%
  filter(!is.na(dataProva$total_cases_per_million)) %>% 
  group_by(wd = week(date)) %>% 
  summarise(
    x = median(total_cases_per_million)
  )

# i ara, dates x set + casos + països
dataProva3 <- dataProva %>% 
  filter(!is.na(total_cases_per_million)) %>% 
  group_by(location, wd = week(date)) %>% 
  summarise(
    x = median(total_cases_per_million)
  ) 

# i pq canviï org i posi set a colm, x veure com ev cada país segons la set
dataProva4 <- dataProva %>% 
  filter(!is.na(total_cases_per_million)) %>% 
  group_by(location, wd = week(date)) %>% 
  summarise(
    x = median(total_cases_per_million)
  ) %>% 
  pivot_wider(names_from = wd, names_prefix = 'week_', values_from = x)


###################################  



## NA ##
# x saber quants n'hi ha i on són --> http://betaeconomia.blogspot.com/2019/08/valores-perdidos-na-en-r-identificacion.html

# x saber mitjana NA cada colm (és núm 2 de fórmula)
apply(is.na(data), 2, mean)

# x saber mitjana NA cada fila (és núm 1 de fórmula)
apply(is.na(data), 1, mean)

# x saber quants NA hi ha per colm
apply(is.na(data), 2, sum)



#########################################################
#### obesitat ####
ob <- read.csv("obesitat.csv")    # font dades: https://ourworldindata.org/obesity
head(ob)

sapply(ob, class)

# canviar nom colm
ob <- rename(ob, country = Entity, code = Code, year = Year, share = Prevalence.of.obesity..both.sexes....WHO..2019.)

# agafar només valors any 2016 (últim any disponible) --> filter, pq és info q és a files
ob <- filter(ob, year==2016) 
ob$share

# a colm països hi ha unes files q fan ref a regió --> eliminar-les
ob <- ob[!(ob$country=="Africa" | ob$country=="Americas"),]  # prova per si funciona, amb 2 1es regions
ob <- ob[!(ob$country=="Eastern Mediterranean" | ob$country=="Europe" | ob$country=="Global" | ob$country=="South-East Asia" | ob$country=="Western Pacific"),]



###########################################################
#### info pp extra ####
library(readxl)    # x poder llegir arxiu, q és xlsx
pp <- read_excel("InfoPaisosExtra.xlsx")

head(pp)
sapply(pp, class)

# seleccionar colm ok
pp <- subset(pp, select = c(COUNTRY, Government_Type, Corruption_preception))
 # tmb es podria fer amb pp <- select(pp, COUNTRY, Government_Type, Corruption_preception)

# canviar nom colm
pp <- rename(pp, country = COUNTRY, gov = Government_Type, corruption = Corruption_preception)




#############################
#### unió bd ob + pp ####
obPp <- left_join(ob, pp, by = "country")  # a ob se li afegeix pp

### unió obPp + dades covid
# mirar quina és la colm comuna: codi país, però a cada bd colm té nom dif
# mirar com són les categ de codi a bd covid
table(data$iso_code)

# mirar com són les categ codi a obPp, x veure si coincideixen amb colm dades covid i així assegurar q a colm comuna valors són iguals
table(obPp$code)

# canviar nom codi dades covid pq coincideixi amb nom obPp (pq aquí nom és més curt)
data <- rename(data, code = iso_code)

# comb bd
dataOk <- left_join(data, obPp, by = "code")



### CREAR SUBTAULA PER CONTINENT ###
# mirar categ colm continent, x saber quants pp hi ha per continent
table(dataOk$continent)

asia <- filter(dataOk, continent == "Asia")
eu <- filter(dataOk, continent == "Europe")
africa <- filter(dataOk, continent == "Africa")
nAm <- filter(dataOk, continent == "North America")
sAm <- filter(dataOk, continent == "South America")
ocean <- filter(dataOk, continent == "Oceania")

# ordenar continents x pp amb més casos/milió hab (no cal fer-ho)
asia <- arrange(asia, desc(total_cases_per_million))
eu <- arrange(eu, desc(total_cases_per_million))
africa <- arrange(africa, desc(total_cases_per_million))
nAm <- arrange(nAm, desc(total_cases_per_million))
sAm <- arrange(sAm, desc(total_cases_per_million))

# x saber pp amb més casos: fer mitjana o suma casos/milió hab (a nova colm) i ordenar. És igual, els 2 càlculs són vàlids
# abans group by: mirar q són les colm on vull q s'apliqui
class(eu$total_cases_per_million)
eu$location <- as.factor(eu$location)
class(eu$location)
# x saber 10 pp més casos (pas a pas)
euProva <- subset(eu, select = c(location, total_cases_per_million))
table(euProva$location)


# prova group by --> ok!!
euOk <- euProva %>% 
  group_by(location) %>% 
  summarise(m_tcpm = mean(total_cases_per_million, na.rm = TRUE)) %>% 
  arrange(desc(m_tcpm))
euOk
  
# print(as_tibble(euProva), n = 46) --> això si no poso l'arrange!!

# ara, amb la resta de continents
asiaProva <- subset(asia, select = c(location, total_cases_per_million))
asiaOk <- asiaProva %>% 
  group_by(location) %>% 
  summarise(m_tcpm = mean(total_cases_per_million, na.rm = TRUE)) %>% 
  arrange(desc(m_tcpm))
asiaOk

africaProva <- subset(africa, select = c(location, total_cases_per_million))
africaOk <- africaProva %>% 
  group_by(location) %>% 
  summarise(m_tcpm = mean(total_cases_per_million, na.rm = TRUE)) %>% 
  arrange(desc(m_tcpm))
africaOk

nAmProva <- subset(nAm, select = c(location, total_cases_per_million))
nAmOk <- nAmProva %>% 
  group_by(location) %>% 
  summarise(m_tcpm = mean(total_cases_per_million, na.rm = TRUE)) %>% 
  arrange(desc(m_tcpm))
nAmOk

sAmProva <- subset(sAm, select = c(location, total_cases_per_million))
sAmOk <- sAmProva %>% 
  group_by(location) %>% 
  summarise(m_tcpm = mean(total_cases_per_million, na.rm = TRUE)) %>% 
  arrange(desc(m_tcpm))
sAmOk

oceanProva <- subset(ocean, select = c(location, total_cases_per_million))
oceanOk <- oceanProva %>% 
  group_by(location) %>% 
  summarise(m_tcpm = mean(total_cases_per_million, na.rm = TRUE)) %>% 
  arrange(desc(m_tcpm))
oceanOk



  

## factors: https://gonzalezgouveia.com/factores-en-r-con-r-studio/

## eliminar files: https://www.datasciencemadesimple.com/delete-or-drop-rows-in-r-with-conditions-2/

## intro R: https://www.datacamp.com/community/tutorials/r-tutorial-read-excel-into-r?utm_source=adwords_ppc&utm_campaignid=1655852085&utm_adgroupid=61045434142&utm_device=c&utm_keyword=%2Bread%20%2Bexcel%20%2Br&utm_matchtype=b&utm_network=g&utm_adpostion=&utm_creative=318880582278&utm_targetid=kwd-374651463968&utm_loc_interest_ms=&utm_loc_physical_ms=1005424&gclid=EAIaIQobChMIxMDL_ai07QIVo4BQBh39Dg-GEAAYASAAEgI-UvD_BwE
  
## aggregate: https://medium.com/free-code-camp/aggregates-in-r-one-of-the-most-powerful-tool-you-can-ask-for-4dd14eafff1f
#             https://datasharkie.com/how-to-use-aggregate-function-in-r/?utm_campaign=News&utm_medium=Community&utm_source=DataCamp.com
#             https://www.r-bloggers.com/2018/07/how-to-aggregate-data-in-r/ 

## group by: https://www.guru99.com/r-aggregate-function.html
#            https://www.youtube.com/watch?v=PMhzZ1sAwnQ

## Na: https://datasharkie.com/how-to-remove-rows-with-na-in-r/
  
## clúster: https://www.youtube.com/watch?v=X4wsXba_tZI&feature=youtu.be&utm_source=Business+Science+-+Combined+List&utm_campaign=87fe29938b-TUES_TIPS_014_pca&utm_medium=email&utm_term=0_a4e5b7c52f-87fe29938b-332937040&mc_cid=87fe29938b&mc_eid=11c496d8f2

